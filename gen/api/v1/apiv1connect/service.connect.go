// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/service.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "project/gen/api/v1"
	common "project/gen/common"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ApiServiceName is the fully-qualified name of the ApiService service.
	ApiServiceName = "api.v1.ApiService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ApiServiceHelloProcedure is the fully-qualified name of the ApiService's Hello RPC.
	ApiServiceHelloProcedure = "/api.v1.ApiService/Hello"
)

// ApiServiceClient is a client for the api.v1.ApiService service.
type ApiServiceClient interface {
	Hello(context.Context, *connect.Request[common.NoRequest]) (*connect.Response[v1.HelloResponse], error)
}

// NewApiServiceClient constructs a client for the api.v1.ApiService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApiServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ApiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	apiServiceMethods := v1.File_api_v1_service_proto.Services().ByName("ApiService").Methods()
	return &apiServiceClient{
		hello: connect.NewClient[common.NoRequest, v1.HelloResponse](
			httpClient,
			baseURL+ApiServiceHelloProcedure,
			connect.WithSchema(apiServiceMethods.ByName("Hello")),
			connect.WithClientOptions(opts...),
		),
	}
}

// apiServiceClient implements ApiServiceClient.
type apiServiceClient struct {
	hello *connect.Client[common.NoRequest, v1.HelloResponse]
}

// Hello calls api.v1.ApiService.Hello.
func (c *apiServiceClient) Hello(ctx context.Context, req *connect.Request[common.NoRequest]) (*connect.Response[v1.HelloResponse], error) {
	return c.hello.CallUnary(ctx, req)
}

// ApiServiceHandler is an implementation of the api.v1.ApiService service.
type ApiServiceHandler interface {
	Hello(context.Context, *connect.Request[common.NoRequest]) (*connect.Response[v1.HelloResponse], error)
}

// NewApiServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApiServiceHandler(svc ApiServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	apiServiceMethods := v1.File_api_v1_service_proto.Services().ByName("ApiService").Methods()
	apiServiceHelloHandler := connect.NewUnaryHandler(
		ApiServiceHelloProcedure,
		svc.Hello,
		connect.WithSchema(apiServiceMethods.ByName("Hello")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.ApiService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ApiServiceHelloProcedure:
			apiServiceHelloHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedApiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedApiServiceHandler struct{}

func (UnimplementedApiServiceHandler) Hello(context.Context, *connect.Request[common.NoRequest]) (*connect.Response[v1.HelloResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ApiService.Hello is not implemented"))
}
