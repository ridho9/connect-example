// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: flightprice/v1/service.proto

package flightpricev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	common "project/gen/common"
	v1 "project/gen/flightprice/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FlightServiceName is the fully-qualified name of the FlightService service.
	FlightServiceName = "flightprice.v1.FlightService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FlightServiceHelloProcedure is the fully-qualified name of the FlightService's Hello RPC.
	FlightServiceHelloProcedure = "/flightprice.v1.FlightService/Hello"
)

// FlightServiceClient is a client for the flightprice.v1.FlightService service.
type FlightServiceClient interface {
	Hello(context.Context, *connect.Request[common.NoRequest]) (*connect.Response[v1.HelloResponse], error)
}

// NewFlightServiceClient constructs a client for the flightprice.v1.FlightService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFlightServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FlightServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	flightServiceMethods := v1.File_flightprice_v1_service_proto.Services().ByName("FlightService").Methods()
	return &flightServiceClient{
		hello: connect.NewClient[common.NoRequest, v1.HelloResponse](
			httpClient,
			baseURL+FlightServiceHelloProcedure,
			connect.WithSchema(flightServiceMethods.ByName("Hello")),
			connect.WithClientOptions(opts...),
		),
	}
}

// flightServiceClient implements FlightServiceClient.
type flightServiceClient struct {
	hello *connect.Client[common.NoRequest, v1.HelloResponse]
}

// Hello calls flightprice.v1.FlightService.Hello.
func (c *flightServiceClient) Hello(ctx context.Context, req *connect.Request[common.NoRequest]) (*connect.Response[v1.HelloResponse], error) {
	return c.hello.CallUnary(ctx, req)
}

// FlightServiceHandler is an implementation of the flightprice.v1.FlightService service.
type FlightServiceHandler interface {
	Hello(context.Context, *connect.Request[common.NoRequest]) (*connect.Response[v1.HelloResponse], error)
}

// NewFlightServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFlightServiceHandler(svc FlightServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	flightServiceMethods := v1.File_flightprice_v1_service_proto.Services().ByName("FlightService").Methods()
	flightServiceHelloHandler := connect.NewUnaryHandler(
		FlightServiceHelloProcedure,
		svc.Hello,
		connect.WithSchema(flightServiceMethods.ByName("Hello")),
		connect.WithHandlerOptions(opts...),
	)
	return "/flightprice.v1.FlightService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FlightServiceHelloProcedure:
			flightServiceHelloHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFlightServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFlightServiceHandler struct{}

func (UnimplementedFlightServiceHandler) Hello(context.Context, *connect.Request[common.NoRequest]) (*connect.Response[v1.HelloResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("flightprice.v1.FlightService.Hello is not implemented"))
}
